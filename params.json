{"name":"AgentK","tagline":"Node.JS web开发框架","body":"# AgentK: 全新的`Node.JS`开发框架\r\n\r\n## 简介\r\n\r\nAgentK 是一个集开发流程和运维于一体的`Node.JS`开发框架，旨在解决快速搭建`Node.JS`项目过程中常见的难题。如果我们从头搭建一个项目，或者从未接触过`Node.JS`开发，往往需要考虑：\r\n\r\n  - 如何组织代码\r\n  - 如何规范代码格式，选择可靠的模块化和异步回调解决方案\r\n  - 如何实现可伸缩与服务可靠性\r\n\r\n等等诸如此类问题。单纯一个集群配置和宕机重启可能都要花费很多精力；而回调地狱更是让新手老手都头痛不已，但`Promise`等其它的编程范式又存在学习成本。\r\n\r\nAgentK从四个角度解决上述问题：\r\n\r\n  1. 支持全新的ES6风格的模块书写和加载方式，使得代码书写更加规范\r\n  2. 通过协程方案解决了回调问题，异步代码可以同步书写，函数的封装对调用者不透明，不需要学习新的编程范式\r\n  3. 集成进程管理和集群功能，提供操作系统级别的进程守护，防止意外宕机或被误杀\r\n  4. 集成路由/模版引擎等常见功能，规范化开发细节\r\n\r\n## 快速上手\r\n\r\n### 安装篇\r\n\r\nAgentK可以通过`npm`进行安装。打开一个终端，输入:\r\n\r\n    npm install kyriosli/agentk -g\r\n\r\n当然如果您正在使用 linux/osx，可能会遇到没有权限的问题，请自行加sudo解决。\r\n\r\nAgentK还支持`bash`/`zsh`的自动补全，所以如果您正在使用 linux/osx，或者 windows下的 mingw32等环境，可以配置一下自动补全，输入：\r\n\r\n    ak completion >> ~/.bashrc (或者 ~/.zshrc如果您正在使用zsh)\r\n\r\n如果要自动补全生效，还需要重新打开终端或重新登录\r\n\r\n### 代码编写篇\r\n\r\nAgentK使用`ES6`(即`ECMAScript 2015`, 最新的JavaScript规范)包含的[module](https://github.com/lukehoban/es6features#modules)和[Promise](https://github.com/lukehoban/es6features#promises)来组织代码和异步接口调用。关于`module`和`Promise`的相关教程可以参考\r\n[TODO](#TODO) 和 [TODO](#TODO)\r\n\r\n同时，它使用了 [Fibers](https://github.com/laverdet/node-fibers) 来规避 Node.JS的回调问题。下面的一段代码展示了一个简单的http服务器，它提供了两个接口：一个静态文件接口和一个反向代理。(完整代码参考 [test.js](https://github.com/kyriosli/agentk/blob/master/test/test.js))\r\n\r\n```js\r\n// test.js\r\nimport {listen, request, read} from '../src/module/http.js';\r\nimport * as response from '../src/module/http_response.js';\r\nimport Router from '../src/module/router.js';\r\nimport * as view from '../src/module/view.js';\r\n\r\nconst route = new Router();\r\n\r\nroute.prefix('/static', function (req) {\r\n    console.log(req.timeStart, req.url);\r\n    return response.file(req.url.substr(1))\r\n        .setHeader('Content-Type', 'text/javascript')\r\n        .enableGzip();\r\n});\r\n\r\nroute.match(/^\\/([^\\/]+)(\\/.*)/, function (req, host, path) {\r\n    console.log(host, path);\r\n    var tres = request({\r\n        method: 'GET',\r\n        host: host,\r\n        path: path\r\n    });\r\n    return response.stream(tres)\r\n        .setStatus(tres.statusCode)\r\n        .setHeaders(tres.headers)\r\n});\r\n\r\nlet server = listen(3000, route);\r\nconsole.log('test listening on', server.address());\r\n```\r\n\r\n将以上代码保存为`test.js`，并在当前目录运行`ak run test.js`即可运行该程序。\r\n\r\n### Running the program\r\n\r\nAgentk can run the program directly, as well as guard its process to prevent system down, and restarts it when the server\r\nmaching is rebooted. Type `ak help` to get help message.\r\n \r\n Available commands are:\r\n \r\n  - `help`        print this help message\r\n  - `run`         run program without crash respawn\r\n  - `start`       start program\r\n  - `stop`        stop program\r\n  - `restart`     restart program\r\n  - `reload`      reload program (partial implemented)\r\n  - `status`      show program status\r\n  - `doc`         generate documentation (not implemented)\r\n  - `init`        initialize project structure (not implemented)\r\n  - `publish`     publish a module\r\n  - `logs`        print program stdout/stderr log message\r\n  - `svc-install` create init.rc script (not implemented)\r\n  - `svc-purge`   remove init.rc script (not implemented)\r\n  - `svc-start`   start service daemon\r\n  - `svc-stop`    stop service daemon\r\n  - `completion`  auto completion helper\r\n\r\nWhen using `ak start program` to enable guarding of the process, a `manifest.json` must be created in the program directory (see [test/manifest.json](test/manifest.json)),\r\nand the name of the program directory is supplied to the command line.\r\n\r\n`manifest.json` contains:\r\n\r\n  - `main` the entry module path of the program. Default to \"index.js\"\r\n  - `directory` the work directory of the program. Default to the program directory\r\n  - `workers` number of processes to be spawned to run the program, default `1`\r\n  - `stdout` the path of the stdout log file to be appended, default to `~/.agentk/out.log`\r\n  - `stderr` the path of the stderr log file to be appended, default to `~/.agentk/err.log`\r\n  - `dependencies` map the depended modules of the program to is revision.\r\n\r\nAll paths are relative to the program directory.\r\n\r\nUse `ak init` to create an empty program structure. (NOT implemented)\r\n\r\n## Writing modules\r\n\r\nTODO\r\n\r\n### Module server\r\n\r\nTODO\r\n\r\n### Publishing modules\r\n\r\nTODO\r\n\r\n### Module auto loading\r\n\r\nTODO","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}