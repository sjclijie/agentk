{"name":"Agentk","tagline":"synchronous Node.js network service framework","body":"# AgentK: Synchronous Node.JS web service framework\r\n\r\n## features\r\n\r\n  - support for new ES6 style module loading\r\n  - write async scripts synchronously\r\n  - intergreted process monitor supporting clusters \r\n  - support for view engines\r\n\r\n## Getting started\r\n\r\n### Installation\r\n\r\nOpen a terminal and type:\r\n\r\n    npm install kyriosli/agentk -g\r\n\r\nIf you are using linux/osx, or mingw32 on windows, you can also enable bash/zsh auto completion by typing:\r\n\r\n    ak completion >> ~/.bashrc (or ~/.zshrc)\r\n\r\n### Writing code\r\n\r\nAgentK uses modern ES6 features including:\r\n\r\n  - [modules and importing/exporting](https://github.com/lukehoban/es6features#modules)\r\n  - [Promise](https://github.com/lukehoban/es6features#promises)\r\n\r\nIt uses [Fibers](https://github.com/laverdet/node-fibers) to get around callbacks in Node.JS development. The example\r\nbelow shows a simple http server that returns static file as well as forward proxy web pages (See [test/test.js](test/test.js)):\r\n\r\n```js\r\n// test.js\r\nimport {listen, request, read} from '../src/module/http.js';\r\nimport * as response from '../src/module/http_response.js';\r\nimport Router from '../src/module/router.js';\r\nimport * as view from '../src/module/view.js';\r\n\r\nconst route = new Router();\r\n\r\nroute.prefix('/static', function (req) {\r\n    console.log(req.timeStart, req.url);\r\n    return response.file(req.url.substr(1))\r\n        .setHeader('Content-Type', 'text/javascript')\r\n        .enableGzip();\r\n});\r\n\r\nroute.match(/^\\/([^\\/]+)(\\/.*)/, function (req, host, path) {\r\n    console.log(host, path);\r\n    var tres = request({\r\n        method: 'GET',\r\n        host: host,\r\n        path: path\r\n    });\r\n    return response.stream(tres)\r\n        .setStatus(tres.statusCode)\r\n        .setHeaders(tres.headers)\r\n});\r\n\r\nlet server = listen(3000, route);\r\nconsole.log('test listening on', server.address());\r\n```\r\nType `ak run test.js` to run the program\r\n\r\n### Running the program\r\n\r\nAgentk can run the program directly, as well as guard its process to prevent system down, and restarts it when the server\r\nmaching is rebooted. Type `ak help` to get help message.\r\n \r\n Available commands are:\r\n \r\n  - `help`        print this help message\r\n  - `run`         run program without crash respawn\r\n  - `start`       start program\r\n  - `stop`        stop program\r\n  - `restart`     restart program\r\n  - `reload`      reload program (partial implemented)\r\n  - `status`      show program status\r\n  - `doc`         generate documentation (not implemented)\r\n  - `init`        initialize project structure (not implemented)\r\n  - `publish`     publish a module\r\n  - `logs`        print program stdout/stderr log message\r\n  - `svc-install` create init.rc script (not implemented)\r\n  - `svc-purge`   remove init.rc script (not implemented)\r\n  - `svc-start`   start service daemon\r\n  - `svc-stop`    stop service daemon\r\n  - `completion`  auto completion helper\r\n\r\nWhen using `ak start program` to enable guarding of the process, a `manifest.json` must be created in the program directory (see [test/manifest.json](test/manifest.json)),\r\nand the name of the program directory is supplied to the command line.\r\n\r\n`manifest.json` contains:\r\n\r\n  - `main` the entry module path of the program. Default to \"index.js\"\r\n  - `directory` the work directory of the program. Default to the program directory\r\n  - `workers` number of processes to be spawned to run the program, default `1`\r\n  - `stdout` the path of the stdout log file to be appended, default to `~/.agentk/out.log`\r\n  - `stderr` the path of the stderr log file to be appended, default to `~/.agentk/err.log`\r\n  - `dependencies` map the depended modules of the program to is revision.\r\n\r\nAll paths are relative to the program directory.\r\n\r\nUse `ak init` to create an empty program structure. (NOT implemented)\r\n\r\n## Writing modules\r\n\r\nTODO\r\n\r\n### Module server\r\n\r\nTODO\r\n\r\n### Publishing modules\r\n\r\nTODO\r\n\r\n### Module auto loading\r\n\r\nTODO","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}